<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.zido.mapper.user.BusinessUserMapper">

	<!-- 通用查询映射结果 -->
	<resultMap type="site.zido.entity.BusinessUser" id="BaseResultMap">
		<id property="id" column="id"/>
		<result property="userId" column="user_id"/>
		<result property="sort" column="sort"/>
		<result property="state" column="state"/>
		<result property="createTime" column="create_time"/>
		<result property="contactName" column="contact_name"/>
		<result property="qq" column="qq"/>
		<result property="phoneNumber" column="phone_number"/>
		<result property="wechat" column="wechat"/>
		<result property="introduceId" column="introduce_id"/>
		<result property="nickname" column="nickname"/>
	</resultMap>

	<resultMap id="minInfoDTO" type="site.zido.dto.BusinessUserInfoDTO">
		<association columnPrefix="u_" property="user" resultMap="site.zido.mapper.user.UserMapper.BaseResultMap"/>
		<association columnPrefix="b_" property="businessUser" resultMap="BaseResultMap"/>
	</resultMap>


	<sql id="businessInfoSelect">

	</sql>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
         id, userId, sort, state, createTime, contactName, qq, phoneNumber, wechat, introduceId, nickname
    </sql>
	<update id="clearIntroduces">
		update brush_business_user set introduce_id = null where introduce_id = #{introduceId}
	</update>
	<select id="selectMaxSort" resultType="java.lang.Integer">
		  select max(sort) from brush_business_user
	</select>
	<select id="selectMaxUserName" resultType="java.lang.String">
		select max(username+0)
		from brush_user
		  INNER join brush_business_user on brush_business_user.user_id = brush_user.id
	</select>
	<select id="selectBusinessList" resultMap="minInfoDTO">
		select
		user.id as u_id,
		user.username as u_name,
		user.password as u_password,
		user.enabled as u_enabled,
		user.ip as u_ip,
		businessUser.id as b_id,
		businessUser.user_id as b_user_id,
		businessUser.sort as b_sort,
		businessUser.state as b_state,
		businessUser.create_time as  b_create_time,
		businessUser.contact_name as b_contact_name,
		businessUser.qq as b_qq,
		businessUser.phone_number as b_phone_number,
		businessUser.wechat as b_wechat,
		businessUser.introduce_id as b_introduce_id,
		businessUser.nickname as b_nickname
		from brush_user user inner join brush_business_user businessUser on businessUser.user_id = user.id
		<where>
			<if test="condition.key != null">
			  	and businessUser.nickname like '%${condition.key}%'
			</if>
			<if test="condition.startTime != null and condition.endTime != null">
				and (create_time &gt; #{condition.startTime} and create_time &lt; #{condition.endTime})
			</if>
			<if test="condition.state != null and condition.state.length &gt; 0">
				<trim prefixOverrides="or" prefix="and (" suffix=" )">
					<foreach collection="condition.state" item="s">
						or businessUser.state = #{s}
					</foreach>
				</trim>
			</if>
		</where>
		<if test="condition.sortName != null">
			order by ${condition.sortName}
			<choose>
				<when test="condition.desc != null and condition.desc == false">
					ASC
				</when>
				<otherwise>
					DESC
				</otherwise>
			</choose>
		</if>
	</select>
	<select id="selectByKey" resultMap="BaseResultMap">
		select user_id,nickname from brush_business_user where state = #{state} and (nickname like '%${key}%' or sort like '%${key}%')
		order by ((case when sort like '%${key}%' then 2 else 0 end) + (case when nickname like '%${key}%' then 1 else 0 end))  DESC ,sort DESC limit #{max}
	</select>
</mapper>
